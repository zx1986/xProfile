# Custom environment variables
[ -f ~/.env ] && set -a; source ~/.env

# asdf
if [ $commands[asdf] ]; then
  asdf() {
    unfunction "$0"
    source $(brew --prefix asdf)/asdf.sh
    $0 "$@"
  }
fi

# Atuin
# eval "$(atuin init zsh)"

# Fuck
thefuck() {
  eval "$(command thefuck --alias)"
}

# https://explainshell.com
explain () {
  if [ "$#" -eq 0 ]; then
    while read  -p "Command: " cmd; do
      curl -Gs "https://www.mankier.com/api/explain/?cols="$(tput cols) --data-urlencode "q=$cmd"
    done
    echo "Bye!"
  elif [ "$#" -eq 1 ]; then
    curl -Gs "https://www.mankier.com/api/explain/?cols="$(tput cols) --data-urlencode "q=$1"
  else
    echo "Usage"
    echo "explain                  interactive mode."
    echo "explain 'cmd -o | ...'   one quoted command to explain it."
  fi
}

transfer () {
  if [ $# -eq 0 ]; then
    echo "No arguments specified.\nUsage:\n transfer <file|directory>\n ... | transfer <file_name>">&2;
    return 1;
  fi;
  if tty -s; then
    file="$1";file_name=$(basename "$file");
    if [ ! -e "$file" ]; then
      echo "$file: No such file or directory">&2;
      return 1;
    fi;
    if [ -d "$file" ]; then
      file_name="$file_name.zip" ,;
      (cd "$file"&&zip -r -q - .)|curl --progress-bar --upload-file "-" "https://transfer.sh/$file_name"|tee /dev/null,;
    else
      cat "$file"|curl --progress-bar --upload-file "-" "https://transfer.sh/$file_name"|tee /dev/null;
    fi;
  else
    file_name=$1;curl --progress-bar --upload-file "-" "https://transfer.sh/$file_name"|tee /dev/null;
  fi;
}

# Git
function gi() { curl -L -s https://www.gitignore.io/api/$@ ;}

# AWS
if [ $commands[awless] ]; then
  awless() {
    unfunction "$0"
    source <(awless completion zsh)
    $0 "$@"
  }
fi

function agp() {
  echo $AWS_PROFILE
}

function asp() {
  if [[ -z "$1" ]]; then
    unset AWS_DEFAULT_PROFILE AWS_PROFILE AWS_EB_PROFILE
    echo AWS profile cleared.
    return
  fi

  local -a available_profiles
  available_profiles=($(aws_profiles))
  if [[ -z "${available_profiles[(r)$1]}" ]]; then
    echo "${fg[red]}Profile '$1' not found in '${AWS_CONFIG_FILE:-$HOME/.aws/config}'" >&2
    echo "Available profiles: ${(j:, :)available_profiles:-no profiles found}${reset_color}" >&2
    return 1
  fi

  export AWS_DEFAULT_PROFILE=$1
  export AWS_PROFILE=$1
  export AWS_EB_PROFILE=$1
}

function aws_profiles() {
  [[ -r "${AWS_CONFIG_FILE:-$HOME/.aws/config}" ]] || return 1
  grep '\[profile' "${AWS_CONFIG_FILE:-$HOME/.aws/config}"|sed -e 's/.*profile \([a-zA-Z0-9_\.-]*\).*/\1/'
}

function _aws_profiles() {
  reply=($(aws_profiles))
}

compctl -K _aws_profiles asp

# fzf
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# z
[ -f /usr/local/etc/profile.d/z.sh ] && source /usr/local/etc/profile.d/z.sh

# Kubernetes
kcdebug() { kubectl run -i --rm --tty debug --image=alpine --restart=Never -- sh }
if [ $commands[kubectl] ]; then
  kubectl() {
    unfunction "$0"
    source <(kubectl completion zsh)
    $0 "$@"
  }
fi

# Helm
if [ $commands[helm] ]; then
  helm() {
    unfunction "$0"
    source <(helm completion zsh)
    $0 "$@"
  }
fi

# KIND
source <(kind completion zsh)

# iTerm
# [ -f ~/.iterm2_shell_integration.zsh ] && source ~/.iterm2_shell_integration.zsh

# Custom Alias
[ -f ~/.aliases ] && source ~/.aliases

autoload -U +X bashcompinit && bashcompinit
complete -o nospace -C /usr/local/bin/mc mc
complete -o nospace -C /usr/local/bin/bitcomplete bit

export PATH="/usr/local/sbin:$PATH"
export PATH="/usr/local/opt/node@16/bin:$PATH"
